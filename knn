def prepare_knn_model(data, features, k):
    X = data[features].values
    knn = NearestNeighbors(n_neighbors=k, metric='euclidean')
    knn.fit(X)
    return knn, X
    
def find_better_deals_by_id(data, knn, X, deal_id, features, k=3):
    query_row = data[data['deal_id'] == deal_id]
    if query_row.empty:
        print(f"Deal ID {deal_id} not found in the dataset.")
        return None

    query_point = query_row[features].values.reshape(1, -1)
    
    distances, indices = knn.kneighbors(query_point)
    nearest_deals = data.iloc[indices[0]].copy()
    nearest_deals['distance'] = distances[0]

    nearest_deals = nearest_deals[nearest_deals['deal_id'] != deal_id]

    # Apply better deal conditions
    nearest_deals['is_better'] = (
        (nearest_deals['monthly_price'] < query_row['monthly_price'].values[0]) &
        (nearest_deals['download_speed'] >= query_row['download_speed'].values[0]) |
        (nearest_deals['monthly_price'] <= query_row['monthly_price'].values[0]) &
        (nearest_deals['download_speed'] > query_row['download_speed'].values[0]) |
        (nearest_deals['monthly_price'] > query_row['monthly_price'].values[0]) &
        (nearest_deals['download_speed'] > query_row['download_speed'].values[0]) |
        (nearest_deals['monthly_price'] == query_row['monthly_price'].values[0]) &
        (nearest_deals['download_speed'] > query_row['download_speed'].values[0])
    )

    better_deals = nearest_deals[nearest_deals['is_better']].sort_values(by=['distance']).head(k)
    return better_deals
